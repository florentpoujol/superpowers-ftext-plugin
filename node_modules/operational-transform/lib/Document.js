var OT = require("./index");
var Document = (function () {
    function Document(text, revisionId) {
        if (text === void 0) { text = ""; }
        if (revisionId === void 0) { revisionId = 0; }
        this.operations = [];
        this.text = text;
        this._refRevisionId = revisionId;
    }
    Document.prototype.apply = function (newOperation, revision) {
        revision -= this._refRevisionId;
        // Should't happen
        if (revision > this.operations.length)
            throw new Error("The operation base revision is greater than the document revision");
        if (revision < this.operations.length) {
            // Conflict!
            var missedOperations = new OT.TextOperation(this.operations[revision].userId);
            missedOperations.targetLength = this.operations[revision].baseLength;
            for (var index = revision; index < this.operations.length; index++)
                missedOperations = missedOperations.compose(this.operations[index]);
            newOperation = missedOperations.transform(newOperation)[1];
        }
        this.text = newOperation.apply(this.text);
        this.operations.push(newOperation.clone());
        return newOperation;
    };
    Document.prototype.getRevisionId = function () { return this.operations.length + this._refRevisionId; };
    return Document;
})();
module.exports = Document;
